// Code generated by protoc-gen-go. DO NOT EDIT.
// source: comment.proto

/*
Package commentpb is a generated protocol buffer package.

It is generated from these files:
	comment.proto

It has these top-level messages:
	Comment
	ListRequest
	ListResponse
	CreateRequest
	CreateResponse
*/
package commentpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Comment struct {
	Id        string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	TicketId  string                     `protobuf:"bytes,2,opt,name=ticket_id,json=ticketId" json:"ticket_id,omitempty"`
	Content   string                     `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *Comment) Reset()                    { *m = Comment{} }
func (m *Comment) String() string            { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()               {}
func (*Comment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Comment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Comment) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

func (m *Comment) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Comment) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Comment) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type ListRequest struct {
	TicketId string `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId" json:"ticket_id,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListRequest) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

type ListResponse struct {
	Comments []*Comment `protobuf:"bytes,1,rep,name=comments" json:"comments,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListResponse) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

type CreateRequest struct {
	TicketId string `protobuf:"bytes,1,opt,name=ticket_id,json=ticketId" json:"ticket_id,omitempty"`
	Content  string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateRequest) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

func (m *CreateRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type CreateResponse struct {
	Comment *Comment `protobuf:"bytes,1,opt,name=comment" json:"comment,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateResponse) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

func init() {
	proto.RegisterType((*Comment)(nil), "commentpb.Comment")
	proto.RegisterType((*ListRequest)(nil), "commentpb.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "commentpb.ListResponse")
	proto.RegisterType((*CreateRequest)(nil), "commentpb.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "commentpb.CreateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CommentService service

type CommentServiceClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
}

type commentServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommentServiceClient(cc *grpc.ClientConn) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/commentpb.CommentService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/commentpb.CommentService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CommentService service

type CommentServiceServer interface {
	List(context.Context, *ListRequest) (*ListResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
}

func RegisterCommentServiceServer(s *grpc.Server, srv CommentServiceServer) {
	s.RegisterService(&_CommentService_serviceDesc, srv)
}

func _CommentService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commentpb.CommentService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commentpb.CommentService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "commentpb.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CommentService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CommentService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment.proto",
}

func init() { proto.RegisterFile("comment.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x4f, 0xf2, 0x40,
	0x10, 0xc6, 0xdf, 0x2d, 0xbc, 0x40, 0x07, 0xe1, 0xb0, 0x07, 0x5d, 0xeb, 0x41, 0xd2, 0x13, 0x31,
	0x66, 0x49, 0xf0, 0xa2, 0x17, 0x8c, 0x21, 0x31, 0x31, 0xf1, 0x54, 0xbd, 0x1b, 0x68, 0x47, 0xb2,
	0xd1, 0x76, 0x2b, 0x1d, 0xfc, 0x14, 0x7e, 0x2c, 0x3f, 0x98, 0x61, 0xff, 0x60, 0x1b, 0x49, 0xf4,
	0xb8, 0x33, 0xcf, 0xcc, 0xf3, 0x9b, 0x67, 0x61, 0x90, 0xea, 0x3c, 0xc7, 0x82, 0x64, 0xb9, 0xd6,
	0xa4, 0x79, 0xe8, 0x9e, 0xe5, 0x32, 0x3a, 0x5d, 0x69, 0xbd, 0x7a, 0xc5, 0x89, 0x69, 0x2c, 0x37,
	0xcf, 0x13, 0x52, 0x39, 0x56, 0xb4, 0xc8, 0x4b, 0xab, 0x8d, 0x3f, 0x19, 0x74, 0xe7, 0x56, 0xce,
	0x87, 0x10, 0xa8, 0x4c, 0xb0, 0x11, 0x1b, 0x87, 0x49, 0xa0, 0x32, 0x7e, 0x02, 0x21, 0xa9, 0xf4,
	0x05, 0xe9, 0x49, 0x65, 0x22, 0x30, 0xe5, 0x9e, 0x2d, 0xdc, 0x65, 0x5c, 0x40, 0x37, 0xd5, 0x05,
	0x61, 0x41, 0xa2, 0x65, 0x5a, 0xfe, 0xc9, 0x2f, 0x21, 0x4c, 0xd7, 0xb8, 0x20, 0xcc, 0x6e, 0x48,
	0xb4, 0x47, 0x6c, 0xdc, 0x9f, 0x46, 0xd2, 0x72, 0x48, 0xcf, 0x21, 0x1f, 0x3d, 0x47, 0xf2, 0x2d,
	0xde, 0x4e, 0x6e, 0xca, 0xcc, 0x4d, 0xfe, 0xff, 0x7d, 0x72, 0x27, 0x8e, 0xcf, 0xa0, 0x7f, 0xaf,
	0x2a, 0x4a, 0xf0, 0x6d, 0x83, 0x15, 0x35, 0xc9, 0x59, 0x93, 0x3c, 0x9e, 0xc1, 0x81, 0xd5, 0x56,
	0xa5, 0x2e, 0x2a, 0xe4, 0x12, 0x7a, 0x2e, 0xb0, 0x4a, 0xb0, 0x51, 0x6b, 0xdc, 0x9f, 0x72, 0xb9,
	0x4b, 0x50, 0xba, 0x70, 0x92, 0x9d, 0x26, 0xbe, 0x85, 0xc1, 0xdc, 0x20, 0xff, 0xc5, 0xad, 0x9e,
	0x53, 0xd0, 0xc8, 0x29, 0x9e, 0xc1, 0xd0, 0xef, 0x71, 0x24, 0xe7, 0x5b, 0xad, 0x71, 0x31, 0x6b,
	0xf6, 0x83, 0x78, 0xc9, 0xf4, 0x83, 0xc1, 0xd0, 0x15, 0x1f, 0x70, 0xfd, 0xae, 0x52, 0xe4, 0x57,
	0xd0, 0xde, 0x9e, 0xc6, 0x0f, 0x6b, 0x73, 0xb5, 0x5c, 0xa2, 0xa3, 0x1f, 0x75, 0xeb, 0x1c, 0xff,
	0xe3, 0xd7, 0xd0, 0xb1, 0x34, 0x5c, 0xd4, 0x4d, 0xeb, 0x87, 0x46, 0xc7, 0x7b, 0x3a, 0x7e, 0xc1,
	0xb2, 0x63, 0x7e, 0xe8, 0xe2, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x48, 0x8c, 0x09, 0x8d, 0x02,
	0x00, 0x00,
}
